//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectAPI.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class hawic_dbEntities : DbContext
    {
        public hawic_dbEntities()
            : base("name=hawic_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_Appointment> tbl_Appointment { get; set; }
        public virtual DbSet<tbl_City> tbl_City { get; set; }
        public virtual DbSet<tbl_Department> tbl_Department { get; set; }
        public virtual DbSet<tbl_ImagingOrder> tbl_ImagingOrder { get; set; }
        public virtual DbSet<tbl_InjectionOrder> tbl_InjectionOrder { get; set; }
        public virtual DbSet<tbl_LaboratoryOrder> tbl_LaboratoryOrder { get; set; }
        public virtual DbSet<tbl_LabOrderLabparam> tbl_LabOrderLabparam { get; set; }
        public virtual DbSet<tbl_labOrderparamGroup> tbl_labOrderparamGroup { get; set; }
        public virtual DbSet<tbl_LabOrderparams> tbl_LabOrderparams { get; set; }
        public virtual DbSet<tbl_NurseOrder> tbl_NurseOrder { get; set; }
        public virtual DbSet<tbl_OrderStatus> tbl_OrderStatus { get; set; }
        public virtual DbSet<tbl_OtpatientService> tbl_OtpatientService { get; set; }
        public virtual DbSet<tbl_Patient> tbl_Patient { get; set; }
        public virtual DbSet<tbl_Patient_Vital> tbl_Patient_Vital { get; set; }
        public virtual DbSet<tbl_PatientHistory> tbl_PatientHistory { get; set; }
        public virtual DbSet<tbl_PatientHistoryOrders> tbl_PatientHistoryOrders { get; set; }
        public virtual DbSet<tbl_Prescription> tbl_Prescription { get; set; }
        public virtual DbSet<tbl_Staff> tbl_Staff { get; set; }
        public virtual DbSet<tbl_SubCity> tbl_SubCity { get; set; }
        public virtual DbSet<tbl_Visit> tbl_Visit { get; set; }
        public virtual DbSet<tbl_Visit_OtpatientService> tbl_Visit_OtpatientService { get; set; }
        public virtual DbSet<tbl_Vital> tbl_Vital { get; set; }
        public virtual DbSet<tbl_Vital_Parameter> tbl_Vital_Parameter { get; set; }
        public virtual DbSet<tbl_Zone> tbl_Zone { get; set; }
        public virtual DbSet<viewTimeline> viewTimelines { get; set; }
    
        [DbFunction("hawic_dbEntities", "fn_GetLabOrderList")]
        public virtual IQueryable<fn_GetLabOrderList_Result> fn_GetLabOrderList(string visitType)
        {
            var visitTypeParameter = visitType != null ?
                new ObjectParameter("VisitType", visitType) :
                new ObjectParameter("VisitType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetLabOrderList_Result>("[hawic_dbEntities].[fn_GetLabOrderList](@VisitType)", visitTypeParameter);
        }
    
        [DbFunction("hawic_dbEntities", "fn_GetLabresultsForVisit")]
        public virtual IQueryable<fn_GetLabresultsForVisit_Result> fn_GetLabresultsForVisit(Nullable<int> labOrderId)
        {
            var labOrderIdParameter = labOrderId.HasValue ?
                new ObjectParameter("LabOrderId", labOrderId) :
                new ObjectParameter("LabOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetLabresultsForVisit_Result>("[hawic_dbEntities].[fn_GetLabresultsForVisit](@LabOrderId)", labOrderIdParameter);
        }
    
        [DbFunction("hawic_dbEntities", "fn_GetMostRecentVisitForPatients")]
        public virtual IQueryable<fn_GetMostRecentVisitForPatients_Result> fn_GetMostRecentVisitForPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetMostRecentVisitForPatients_Result>("[hawic_dbEntities].[fn_GetMostRecentVisitForPatients]()");
        }
    
        [DbFunction("hawic_dbEntities", "fnGetOPDListWithCount")]
        public virtual IQueryable<fnGetOPDListWithCount_Result> fnGetOPDListWithCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetOPDListWithCount_Result>("[hawic_dbEntities].[fnGetOPDListWithCount]()");
        }
    
        [DbFunction("hawic_dbEntities", "fnGetPatientAdmittedList")]
        public virtual IQueryable<fnGetPatientAdmittedList_Result> fnGetPatientAdmittedList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetPatientAdmittedList_Result>("[hawic_dbEntities].[fnGetPatientAdmittedList]()");
        }
    
        [DbFunction("hawic_dbEntities", "fnGetPatientAdmittedListForOPD")]
        public virtual IQueryable<fnGetPatientAdmittedListForOPD_Result> fnGetPatientAdmittedListForOPD(Nullable<int> opd)
        {
            var opdParameter = opd.HasValue ?
                new ObjectParameter("Opd", opd) :
                new ObjectParameter("Opd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetPatientAdmittedListForOPD_Result>("[hawic_dbEntities].[fnGetPatientAdmittedListForOPD](@Opd)", opdParameter);
        }
    
        [DbFunction("hawic_dbEntities", "fnGetPatientNotAdmittedList")]
        public virtual IQueryable<fnGetPatientNotAdmittedList_Result> fnGetPatientNotAdmittedList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetPatientNotAdmittedList_Result>("[hawic_dbEntities].[fnGetPatientNotAdmittedList]()");
        }
    
        [DbFunction("hawic_dbEntities", "fnGetPatientVitalList")]
        public virtual IQueryable<fnGetPatientVitalList_Result> fnGetPatientVitalList(Nullable<int> visitId)
        {
            var visitIdParameter = visitId.HasValue ?
                new ObjectParameter("VisitId", visitId) :
                new ObjectParameter("VisitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetPatientVitalList_Result>("[hawic_dbEntities].[fnGetPatientVitalList](@VisitId)", visitIdParameter);
        }
    
        [DbFunction("hawic_dbEntities", "fnGetPatientVitalsList")]
        public virtual IQueryable<fnGetPatientVitalsList_Result> fnGetPatientVitalsList(Nullable<int> visitId)
        {
            var visitIdParameter = visitId.HasValue ?
                new ObjectParameter("VisitId", visitId) :
                new ObjectParameter("VisitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetPatientVitalsList_Result>("[hawic_dbEntities].[fnGetPatientVitalsList](@VisitId)", visitIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_fn_GetLabOrderForVisit(Nullable<int> visitId, Nullable<int> opdId)
        {
            var visitIdParameter = visitId.HasValue ?
                new ObjectParameter("VisitId", visitId) :
                new ObjectParameter("VisitId", typeof(int));
    
            var opdIdParameter = opdId.HasValue ?
                new ObjectParameter("OpdId", opdId) :
                new ObjectParameter("OpdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_fn_GetLabOrderForVisit", visitIdParameter, opdIdParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spClosePreviousVisits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClosePreviousVisits");
        }
    
        public virtual int spfn_GetLabOrderParamAll(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spfn_GetLabOrderParamAll", groupIdParameter);
        }
    
        public virtual int spfn_GetLabOrderParamList(Nullable<int> groupId, Nullable<int> labOrderId, string visitType)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var labOrderIdParameter = labOrderId.HasValue ?
                new ObjectParameter("LabOrderId", labOrderId) :
                new ObjectParameter("LabOrderId", typeof(int));
    
            var visitTypeParameter = visitType != null ?
                new ObjectParameter("VisitType", visitType) :
                new ObjectParameter("VisitType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spfn_GetLabOrderParamList", groupIdParameter, labOrderIdParameter, visitTypeParameter);
        }
    
        public virtual int spfn_GetLabOrderpatientList(Nullable<int> opdId)
        {
            var opdIdParameter = opdId.HasValue ?
                new ObjectParameter("OpdId", opdId) :
                new ObjectParameter("OpdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spfn_GetLabOrderpatientList", opdIdParameter);
        }
    }
}
